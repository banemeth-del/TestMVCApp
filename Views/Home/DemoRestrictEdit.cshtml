@model TestMVCApp.Models.PageModel
@{
    ViewBag.Title = "Test Restrict Edit";
}

<div class="row">
    <h2>Test Restrict Edit</h2>
</div>

<button onclick="saveDocument()">Save Document</button>
<button onclick="backToIndexPage()">Cancel</button>

@{
    //construct serviceurl (in localhost we need to add "MCL" to that
    var serviceURL = "/Home/";

    var userDisplayName = "TestUser";
    var docEditorContainer = new Syncfusion.EJ2.DocumentEditor.DocumentEditorContainerBuilder()
        .Created("onDocumentEditorContainerCreated")
        .ServiceUrl(serviceURL)//We need to explicitly set the url where the tool can found the "RestrictEditing" API
        .DocumentChange("onDocumentLoaded")
        .EnableTrackChanges(true)
        .EnableComment(true)
        .ShowPropertiesPane(true)
        .EnableToolbar(true)
        .CurrentUser(userDisplayName)
        .ToolbarItems(new string[] {
            /*"New", "Open",*/ "Undo", "Redo" ,"Comments", "Image", "Table" /*, "Hyperlink" ,"Bookmark", "TableOfContents"*/, "Header",  "Footer",
            /*"PageSetup", "PageNumber",*/"Break","Find","LocalClipboard"/*, "RestrictEditing"*/ })
        .Width("100%")
        .Height("100%")
        ;
    docEditorContainer.ID = "DocumentEditor";
}
@docEditorContainer.Render()

<style>

    #DocumentEditor_editor_viewerContainer {
        height: 1000px !important;
    }


    /*limit the height of "too high" toolbar elements..*/
    .e-control.e-toolbar.e-lib.e-keyboard {
        height: 30px !important
    }

    .e-de-track-accept-button.e-control.e-btn.e-lib.e-outline.e-success.e-de-overlay {
        height: 30px !important
    }

    .e-de-track-reject-button.e-control.e-btn.e-lib.e-outline.e-danger.e-de-overlay {
        height: 30px !important
    }
</style>

<script type="text/javascript">

    //contract docx data
    var data = @Html.Raw(Model.sfdtContent);

   //handle event when document editor container created
   function onDocumentEditorContainerCreated() {
       //open the document stored in data
       var container = document.getElementById("DocumentEditor").ej2_instances[0];
       documenteditor = container.documentEditor;
       documenteditor.open(data);

       //enforce protection on document
       debugger;

       if ('@Model.RestrictType' == 'NoProtection') {
           //documenteditor.editor.stopProtection("password");

           documenteditor.editor.stopProtectionAsync("password").then(() => {
               setTimeout(() => {
                   debugger; //code is never reaching this point
                   container.enableTrackChanges = true;
               }, "1000");
           });

       }
       else {
           documenteditor.editor.enforceProtection("password", '@Model.RestrictType');
       }
       //stop the document protection
       //container.documentEditor.editor.stopProtection(restricteditpass);

       //Enable read only mode.
       //container.restrictEditing = true;

       //Enable comment only mode
       //documenteditor.editor.enforceProtection(restricteditpass, 'CommentsOnly');

   };

    //handle event when document load completes
    function onDocumentLoaded(args) {
        //debugger;
    }

    //back to contracts index page
    function backToIndexPage() {
        var url = new URL(baseuri + '/Home/Index');
        location.href = url;
    }

    function saveDocument() {
        var formdata = new FormData(); //FormData object

        //stop the protection of the document before save
        var currentProtection = documenteditor.editor.documentHelper.protectionType;
        if (currentProtection != "NoProtection") {
            documenteditor.editor.stopProtectionAsync("password").then(() => {
                setTimeout(() => {
                    debugger; //code is never reaching this point
                    container.enableTrackChanges = true;
                }, "1000");
            });
        }
        //

       //Set form fields..
       //Set content later extract to function but for first pass to server side is like this
       formdata.append("sfdtContent", document.getElementById("DocumentEditor").ej2_instances[0].documentEditor.serialize());
       //Creating an XMLHttpRequest and sending
       var xhr = new XMLHttpRequest();

        var url = new URL(baseuri + '/Home/DemoDocSave/');

       xhr.open('POST', url);
       xhr.send(formdata);
       xhr.onreadystatechange = function () {
           //debugger;

           if (xhr.readyState === 4 && xhr.status === 200) {

               var response = JSON.parse(xhr.responseText);

               //in case of success return back to contract index
               if (response.success) {

                   backToIndexPage();
               }
               //Set errors and show them
               else {
                   alert("Error occured!");
               }
           }
           else {
               if (xhr.statusText != "OK") {
                   alert("Error occured!");
               }
           }
       }
       return false;
    }

</script>

@Html.EJS().ScriptManager()

